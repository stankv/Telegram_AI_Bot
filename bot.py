from telegram.ext import ApplicationBuilder, MessageHandler, filters, CallbackQueryHandler, CommandHandler

from gpt import *
from settings import CHAT_GPT_TOKEN, TG_TOKEN
from util import *


async def start(update, context):
    dialog.mode = 'main'
    text = load_message("main")    # –Ω–µ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ-—è!
    await send_photo(update, context, "gpt")
    await send_text(update, context, text)
    await show_main_menu(update, context, {
        "/start":"–≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –±–æ—Ç–∞",
        "/profile": "–≥–µ–Ω–µ—Ä–∞—Ü–∏—è Tinder-–ø—Ä–æ—Ñ–ª—è üòé",
        "/opener": "—Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞ ü•∞",
        "/message": "–ø–µ—Ä–µ–ø–∏—Å–∫–∞ –æ—Ç –≤–∞—à–µ–≥–æ –∏–º–µ–Ω–∏ üòà",
        "/date": "–ø–µ—Ä–µ–ø–∏—Å–∫–∞ —Å–æ –∑–≤–µ–∑–¥–∞–º–∏ üî•",
        "/gpt": "–∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å —á–∞—Ç—É GPT üß†",
    })


async def gpt(update, context):
    dialog.mode = 'gpt'
    text = load_message("gpt")    # –Ω–µ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ-—è!
    await send_photo(update, context, "gpt")
    await send_text(update, context, text)


async def gpt_dialog(update, context):
    text = update.message.text
    prompt = load_prompt('gpt')
    answer = await chatGPT.send_question(prompt, text)
    await  send_text(update, context, answer)


async def date(update, context):
    dialog.mode = 'date'
    text = load_message("date")    # –Ω–µ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ-—è!
    await send_photo(update, context, "date")
    await send_text_buttons(update, context, text, {
        "date_grande":"–ê—Ä–∏–∞–Ω–∞ –ì—Ä–∞–Ω–¥–µ",
        "date_robbie": "–ú–∞—Ä–≥–æ –†–æ–±–±–∏",
        "date_zendaya": "–ó–µ–Ω–¥–µ—è",
        "date_gosling": "–†–∞–π–∞–Ω –ì–æ—Å–ª–∏–Ω–≥",
        "date_hardy": "–¢–æ–º –•–∞—Ä–¥–∏",
    })


async def date_dialog(update, context):
    text = update.message.text
    my_message = await send_text(update, context, '–î–µ–≤—É—à–∫–∞ –Ω–∞–±–∏—Ä–∞–µ—Ç —Ç–µ–∫—Å—Ç...')
    answer = await chatGPT.add_message(text)
    await my_message.edit_text(answer)


async def date_button(update, context):
    query = update.callback_query.data
    await update.callback_query.answer()
    await send_photo(update, context, query)
    await  send_text(update, context, '–û—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä! –ü—Ä–∏–≥–ª–∞—Å–∏ –¥–µ–≤—É—à–∫—É (–ø–∞—Ä–Ω—è) –Ω–∞ —Å–≤–∏–¥–∞–Ω–∏–µ –∑–∞ 5 —Å–æ–æ–±—â–µ–Ω–∏–π!')

    prompt = load_prompt(query)
    chatGPT.set_prompt(prompt)


async def message(update, context):
    dialog.mode = 'message'
    text = load_message('message')
    await send_photo(update, context, 'message')
    await  send_text_buttons(update, context, text, {
        "message_next":"–°–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ",
        "message_date": "–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –Ω–∞ —Å–≤–∏–¥–∞–Ω–∏–µ"
    })
    dialog.list.clear()


async def message_button(update, context):
    query = update.callback_query.data
    await update.callback_query.answer()

    prompt = load_prompt(query)
    user_chat_history = "\n\n".join(dialog.list)
    my_message = await send_text(update, context, 'ChatGPT –¥—É–º–∞–µ—Ç –Ω–∞–¥ –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–∞...')
    answer = await  chatGPT.send_question(prompt, user_chat_history)
    await my_message.edit_text(answer)


async def message_dialog(update, context):
    text = update.message.text
    dialog.list.append(text)


async def profile(update, context):
    dialog.mode = 'profile'
    text = load_message('profile')
    await send_photo(update, context, 'profile')
    await send_text(update, context, text)

    dialog.user.clear()
    dialog.count = 0
    await send_text(update, context, '–°–∫–æ–ª—å–∫–æ –≤–∞–º –ª–µ—Ç?')


async def profile_dialog(update, context):
    text = update.message.text
    dialog.count += 1
    if dialog.count == 1:
        dialog.user['age'] = text
        await send_text(update, context, '–ö–µ–º –≤—ã —Ä–∞–±–æ—Ç–∞–µ—Ç–µ?')
    elif dialog.count == 2:
        dialog.user['occupation'] = text
        await send_text(update, context, '–£ –≤–∞—Å –µ—Å—Ç—å —Ö–æ–±–±–∏?')
    elif dialog.count == 3:
        dialog.user['hobby'] = text
        await send_text(update, context, '–ß—Ç–æ –≤–∞–º –ù–ï –Ω—Ä–∞–≤–∏—Ç—Å—è –≤ –ª—é–¥—è—Ö?')
    elif dialog.count == 4:
        dialog.user['annoys'] = text
        await send_text(update, context, '–¶–µ–ª–∏ –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞?')
    elif dialog.count == 5:
        dialog.user['goals'] = text
        prompt = load_prompt('profile')
        user_info = dialog_user_info_to_str(dialog.user)
        my_message = await send_text(update, context, "ChatCPT –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å. –ü–æ–¥–æ–∂–¥–∏—Ç–µ...")
        answer = await chatGPT.send_question(prompt, user_info)
        await my_message.edit_text(answer)


async def opener(update, context):
    dialog.mode = 'opener'
    text = load_message('opener')
    await send_photo(update, context, 'opener')
    await send_text(update, context, text)

    dialog.user.clear()
    dialog.count = 0
    await send_text(update, context, '–ò–º—è –¥–µ–≤—É—à–∫–∏?')


async def opener_dialog(update, context):
    text = update.message.text
    dialog.count += 1
    if dialog.count == 1:
        dialog.user['name'] = text
        await send_text(update, context, '–°–∫–æ–ª—å–∫–æ –µ–π –ª–µ—Ç?')
    elif dialog.count == 2:
        dialog.user['age'] = text
        await send_text(update, context, '–û—Ü–µ–Ω–∏ –µ–µ –≤–Ω–µ—à–Ω–æ—Å—Ç—å: 1-10 –±–∞–ª–ª–æ–≤?')
    elif dialog.count == 3:
        dialog.user['handsome'] = text
        await send_text(update, context, '–ö–µ–º –æ–Ω–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç?')
    elif dialog.count == 4:
        dialog.user['occupation'] = text
        await send_text(update, context, '–¶–µ–ª–∏ –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞?')
    elif dialog.count == 5:
        dialog.user['goals'] = text
        prompt = load_prompt('opener')
        user_info = dialog_user_info_to_str(dialog.user)
        answer = await chatGPT.send_question(prompt, user_info)
        await send_text(update, context, answer)


async def hello(update, context):
    if dialog.mode == 'gpt':
        await gpt_dialog(update, context)
    elif dialog.mode == 'date':
        await date_dialog(update, context)
    elif dialog.mode == 'message':
        await message_dialog(update, context)
    elif dialog.mode == 'profile':
        await profile_dialog(update, context)
    elif dialog.mode == 'opener':
        await opener_dialog(update, context)
    else:
        await send_text(update, context,'*–ü—Ä–∏–≤–µ—Ç!*')
        await send_text(update, context, '_–ö–∞–∫ –¥–µ–ª–∞?_')
        await send_text(update, context, '–í—ã –Ω–∞–ø–∏—Å–∞–ª–∏: ' + update.message.text)
        await send_photo(update, context, 'avatar_main')
        await send_text_buttons(update, context, '–ó–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å?', {
            "start":"–ó–∞–ø—É—Å—Ç–∏—Ç—å",
            "Stop":"–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å"
        })


# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫
async def hello_button(update, context):
    query = update.callback_query.data
    if query == "start":
        await send_text(update, context, '–ü—Ä–æ—Ü–µ—Å—Å –∑–∞–ø—É—â–µ–Ω')
    else:
        await send_text(update, context, '–ü—Ä–æ—Ü–µ—Å—Å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')


dialog = Dialog()
dialog.mode = None
dialog.list = []
dialog.count = 0    # —Å—á–µ—Ç—á–∏–∫ –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞ –≤ Tinder
dialog.user = {}

# –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ ChatGPT
chatGPT = ChatGptService(token=CHAT_GPT_TOKEN)

app = ApplicationBuilder().token(TG_TOKEN).build()

# —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Ñ-–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞
app.add_handler(CommandHandler("start", start))    # –∫–æ–º–∞–Ω–¥–∞ –±–æ—Ç–∞ –∏ –µ–µ —Ñ-—è
app.add_handler(CommandHandler("gpt", gpt))
app.add_handler(CommandHandler("date", date))
app.add_handler(CommandHandler("message", message))
app.add_handler(CommandHandler("profile", profile))
app.add_handler(CommandHandler("opener", opener))

# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ–≥–æ, —á—Ç–æ –ø–∏—à–µ—Ç —á–µ–ª–æ–≤–µ–∫ –≤ —á–∞—Ç
# –≤—ã–∑—ã–≤–∞—Ç—å —Ñ-—é hello –ø—Ä–∏ –≤–≤–µ–¥–µ–Ω–Ω–æ–º —Ç–µ–∫—Å—Ç–µ –∏ –Ω–µ –≤—ã–∑—ã–≤–∞—Ç—å –ø—Ä–∏ –≤–≤–æ–¥–µ –∫–æ–º–∞–Ω–¥—ã
app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, hello))

# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫
app.add_handler(CallbackQueryHandler(date_button, pattern='^date_.*'))    # —Ä–µ–≥. –≤—ã—Ä–∞–∂–µ–Ω–∏–µ
app.add_handler(CallbackQueryHandler(message_button, pattern='^message_.*'))
app.add_handler(CallbackQueryHandler(hello_button))

app.run_polling()
